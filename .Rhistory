#' @export
#'
#' @examples
#'sdsm_props <- sdsm(davis, trials = 100,dyad = c("EVELYN", "CHARLOTTE" ))
sdsm <- function(B,
trials = 10000,
model = "logit",
by_row = TRUE,
sparse = TRUE,
maxiter = 25,
dyad = NULL){
#Argument Checks
if ((by_row!="TRUE") & (by_row!="FALSE")) {stop("by_row must be either TRUE or FALSE")}
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((model!="logit") & (model!="probit") & (model!="log") & (model!="cloglog")) {stop("model must be: logit | probit | log | cloglog")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#If you want data by column, indicate false
if (by_row == FALSE) {B <- t(B)}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Compute probabilities for SDSM (alternative is in star)
#Vectorize the bipartite data
A <- data.frame(as.vector(B))
names(A)[names(A)=="as.vector.B."] <- "value"
#Assign row and column IDs in the vectorized data
A$row <- rep(1:nrow(B), times=ncol(B))
A$col <- rep(1:ncol(B), each=nrow(B))
#Compute and attach rowsums, columnsums, interact
A$rowmarg <- stats::ave(A$value,A$row,FUN=sum)
A$colmarg <- stats::ave(A$value,A$col,FUN=sum)
A$rowcol<-A$rowmarg*A$colmarg
#Estimate logit model, compute probabilities
model.estimates <- stats::glm(formula= value ~  rowmarg + colmarg + rowcol, family = stats::binomial(link=model), data=A, control = list(maxit = maxiter))
probs <- as.vector(stats::predict(model.estimates,newdata=A,type = "response"))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
print(paste("Finding the Signed Backbone using", model, "SDSM"))
}
#Use GLM probabilities to create an SDSM Bstar
#Bstar <- matrix(rbinom(nrow(B) * ncol(B), 1, probs), nrow(B), ncol(B))  #Equivalent, but slightly slower
Bstar <- matrix(((stats::runif(nrow(B) * ncol(B)))<=probs)+0, nrow(B), ncol(B))
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time), 2) * (trials/10))
print(paste("Estimated time to complete is", est, units(est)))
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
} #end timer estimate
if (i>=10) {utils::setTxtProgressBar(pb, i)}
} #end for loop
close(pb)
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
#Save Dyad of P
if (length(dyad) == 0){
edge_weights <- NULL
}
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end sdsm function
library(backbone)
?sdsm
library(backbone)
devtools::build()
vignette(backbone)
library(backbone)
browseVignettes("backbone")
install.packages("C:/Users/Rachel/Dropbox/MSU/Research/2019 Backbone/Backbone Package/backbone_1.0.3.tar.gz", repos = NULL, type = "source")
browseVignettes("backbone")
?universal
universal <- function(B,
upper = 1,
lower = NULL,
bipartite = FALSE){
if ((class(upper)!="function") & (class(upper)!="numeric")) {stop("upper must be either function or numeric")}
if ((class(lower)!="function") & (class(lower)!="numeric")) {stop("lower must be either function or numeric")}
if (bipartite == TRUE){
P <- B%*%t(B)
} else {
P <- B
}
#Set threshold values
if (class(upper) == "function"){
ut <- upper(P)
}
else{ut <- upper}
if (class(lower) == "function"){
lt <- lower(P)
}
else{lt <- lower}
#Create backbone matrix
backbone <- matrix(0, nrow(P), ncol(P))
negative <- (P<=lt)+0
positive <- (P>=ut)+0
if (length(lower) > 0){
backbone <- backbone - negative
}
backbone <- backbone + positive
diag(backbone) <- 0
return(backbone)
}
test3 <- universal(davis, upper = 4, lower = 1, bipartite = TRUE)
davis <- matrix(
c(1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,
0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,
0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0),
nrow = 18,
ncol = 14,
byrow = TRUE,
dimnames = list(
c("EVELYN", "LAURA", "THERESA", "BRENDA", "CHARLOTTE", "FRANCES", "ELEANOR", "PEARL", "RUTH", "VERNE", "MYRNA", "KATHERINE", "SYLVIA", "NORA", "HELEN", "DOROTHY", "OLIVIA", "FLORA"),
c("6/27", "3/2", "4/12", "9/26", "2/25", "5/19", "3/15", "9/16", "4/8", "6/10", "2/23", "4/7", "11/21", "8/3")
)
)
test3 <- universal(davis, upper = 4, lower = 1, bipartite = TRUE)
library(backbone)
universal_bb <- universal(davis, upper = function(x)mean(x)+sd(x), lower=function(x)mean(x)-sd(x), bipartite = TRUE)
class(NULL)
universal <- function(B,
upper = 1,
lower = NULL,
bipartite = FALSE){
if ((class(upper)!="function") & (class(upper)!="numeric")) {stop("upper must be either function or numeric")}
if ((class(lower)!="function") & (class(lower)!="numeric") & (class(lower)!="NULL")) {stop("lower must be either function or numeric")}
if (bipartite == TRUE){
P <- B%*%t(B)
} else {
P <- B
}
#Set threshold values
if (class(upper) == "function"){
ut <- upper(P)
}
else{ut <- upper}
if (class(lower) == "function"){
lt <- lower(P)
}
else{lt <- lower}
#Create backbone matrix
backbone <- matrix(0, nrow(P), ncol(P))
negative <- (P<=lt)+0
positive <- (P>=ut)+0
if (length(lower) > 0){
backbone <- backbone - negative
}
backbone <- backbone + positive
diag(backbone) <- 0
return(backbone)
}
library(backbone)
?op
?layout_
library(backbone)
G <- davis%*%t(davis) #projected davis dataset, a weighted graph
universal_bb <- universal(G, upper = 0)
graph <- igraph::graph_from_adjacency_matrix(universal_bb, mode = "undirected")
plot(graph)
library(backbone)
library(backbone)
library(backbone)
library(backbone)
?backbone
browseVignettes("backbone")
library(backbone)
devtools::build()
library(backbone)
packageVersion("backbone")
install.packages("C:/Users/Rachel/Dropbox/MSU/Research/2019 Backbone/Backbone Package/backbone_1.0.4.tar.gz", repos = NULL, type = "source")
library(backbone)
packageVersion("backbone")
browseVignettes(backbone)
browseVignettes("backbone")
vignette("backbone_introduction", package = "backbone")
?backbone
library(backbone)
?sdsm
library(backbone)
library(backbone)
?sdsm
?fdsm
library(backbone)
library(backbone)
?fdsm
library(backbone)
?fdsm
library(backbone)
library(backbone)
?fdsm
library(backbone)
?fdsm
library(backbone)
?sdsm
sdsm_props <- sdsm(davis, trials = 100,dyad = c("EVELYN", "CHARLOTTE" ))
library(backbone)
library(backbone)
?backbone
??backbone
library(backbone)
RShowDoc(backbone)
RShowDoc("backbone")
help(package = "backbone")
help(package = "stats")
help(package = "igraph")
help(package = "disparityfilter")
help(package = "circlize")
?circlize
help(package = "CVXR")
library(backbone)
help(package = "backbone")
devtools::build
devtools::build()
install.packages("C:/Users/Rachel/Dropbox/MSU/Research/2019 Backbone/Backbone Package/backbone_1.0.0.tar.gz", repos = NULL, type = "source")
library(backbone)
version(backbone)
package_version(backbone)
package_version("backbone")
help("backbone")
library(backbone)
devtools::build()
check(cleanup = FALSE,manual = TRUE,path = getwd())
devtools::check(cleanup = FALSE, manual = TRUE, path = getwd())
devtools::build_manual(path=getwd())
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
devtools::build_manual(path=getwd())
devtools::check(manual=TRUE)
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=":"))
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=":"))
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.unsetenv()
Sys.unsetenv(x)
Sys.unsetenv("PATH")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
Sys.getenv("PATH")
Sys.unsetenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/"))
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.setenv("PATH" = "C:/Program Files/MikTeX 2.9/miktex/bin/x64")
Sys.getenv("PATH")
devtools::check("backbone")
devtools::check(cleanup = FALSE,manual = TRUE,path = getwd())
library(backbone)
devtools::build_manual(pgk = "backbone")
devtools::build_manual(pkg = "backbone")
devtools::build_manual()
Sys.which("pdflatex")
Sys.setenv("PATH" = "C:/Program Files/MikTeX 2.9/miktex/bin/x64")
Sys.getenv("PATH")
Sys.which("pdflatex")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
H
devtools::check()
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv(RSTUDIO_PANDOC = Sys.getenv("RSTUDIO_PANDOC"))
devtools::check()
?rmarkdown::pandoc_available
pandoc_available()
library(rmarkdown)
pandoc_available()
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv(RSTUDIO_PANDOC = 'C:/Users/Rachel/Anaconda3/envs/rstudio/Library/Scripts/pandoc')
pandoc_available()
library(backbone)
devtools::build_manual()
Sys.which("pdflatex")
library(backbone)
devtools::build_manual()
Sys.getenv("pdflatex")
tinytex::install_tinytex()
Sys.getenv("pdflatex")
devtools::build_manual()
library(tinytex)
devtools::build_manual()
Sys.which("pdflatex")
Sys.getenv("PATH")
devtools::check()
devtools::check()
devtools::build_manual()
library(backbone)
library(backbone)
devtools::build_manual()
Sys.getenv("pdflatex")
Sys.getenv("pdflatex")
devtools::build_manual()
help(backbone)
browseVignettes("backbone")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:/Program Files/MiKTeX 2.9/miktex/bin/x64", sep = ":"))
Sys.getenv("pdflatex")
devtools::build_manual()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
Sys.getenv("PATH")
Sys.getenv("pdflatex")
Sys.which("pdflatex")
devtools::build_manual()
library(backbone)
?fdsm
devtools::build_manual()
devtools::build_manual()
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
check_man <- function(){
man_files <- list.files("man", full.names = T)
dir.create("man_backup", showWarnings = F)
file.copy(man_files, "man_backup")
unlink(man_files)
n_man_file <- list.files("man_backup", full.names = T)
tp <- tempdir()
for_a_man <- function(mn){
cat("Checking: ", basename(mn))
file.copy(mn, "man")
devtools::build_manual(path = tp)
chk <- length(list.files(tp, ".pdf$")) > 0
d0 <- tibble(man_file = basename(mn), test = chk)
unlink(list.files(tp, ".pdf$", full.names = T))
unlink(list.files("man", full.names = T))
cat(" ... Done!", ifelse(chk, "ok","issues"),"\n")
d0
}
all_checks <- n_man_file %>% map_df(for_a_man)
file.copy(n_man_file, "man")
unlink(tp, recursive = T)
unlink("man_backup", recursive = T)
all_checks
}
check_man()
all_checks <- n_man_file %>% map_df(for_a_man)
library(tidyverse)
all_checks <- n_man_file %>% map_df(for_a_man)
check_man <- function(){
man_files <- list.files("man", full.names = T)
dir.create("man_backup", showWarnings = F)
file.copy(man_files, "man_backup")
unlink(man_files)
n_man_file <- list.files("man_backup", full.names = T)
tp <- tempdir()
for_a_man <- function(mn){
cat("Checking: ", basename(mn))
file.copy(mn, "man")
devtools::build_manual(path = tp)
chk <- length(list.files(tp, ".pdf$")) > 0
d0 <- tibble(man_file = basename(mn), test = chk)
unlink(list.files(tp, ".pdf$", full.names = T))
unlink(list.files("man", full.names = T))
cat(" ... Done!", ifelse(chk, "ok","issues"),"\n")
d0
}
all_checks <- n_man_file %>% map_df(for_a_man)
file.copy(n_man_file, "man")
unlink(tp, recursive = T)
unlink("man_backup", recursive = T)
all_checks
}
check_man()
check_man()
library(backbone)
?davis
check_man()
check_man()
check_man()
library(backbone)
check_man()
check_man()
library(backbone)
check_man()
library(backbone)
library(tidyverse)
check_man <- function(){
man_files <- list.files("man", full.names = T)
dir.create("man_backup", showWarnings = F)
file.copy(man_files, "man_backup")
unlink(man_files)
n_man_file <- list.files("man_backup", full.names = T)
tp <- tempdir()
for_a_man <- function(mn){
cat("Checking: ", basename(mn))
file.copy(mn, "man")
devtools::build_manual(path = tp)
chk <- length(list.files(tp, ".pdf$")) > 0
d0 <- tibble(man_file = basename(mn), test = chk)
unlink(list.files(tp, ".pdf$", full.names = T))
unlink(list.files("man", full.names = T))
cat(" ... Done!", ifelse(chk, "ok","issues"),"\n")
d0
}
all_checks <- n_man_file %>% map_df(for_a_man)
file.copy(n_man_file, "man")
unlink(tp, recursive = T)
unlink("man_backup", recursive = T)
all_checks
}
check_man()
check_man()
library(backbone)
check_man()
?davis
??davis
davis
devtools::build_manual()
library(backbone)
devtools::build_manual()
library(backbone)
devtools::build_manual()
?davis
library(backbone)
devtools::build_manual()
?davis
library(backbone)
?davis
devtools::build_manual()
devtools::build_manual()
library(backbone)
devtools::build_manual()
devtools::build_manual()
library(backbone)
devtools::build_manual()
devtools::build_manual()
devtools::build()
devtools::check()
devtools::build()
devtools::build()
help(package = 'backbone')
devtools::install_github("metacran/cranlogs")
library(cranlogs)
library(devtools)
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
Sys.which('git')
library(backbone)
browseVignettes("backbone")
devtools::build()
browseVignettes("backbone")
install.packages("backbone")
browseVignettes("backbone")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
library(backbone)
file.exists("~/.ssh/id_rsa.pub")
