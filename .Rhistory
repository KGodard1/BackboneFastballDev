#switch those indices in positive and negative to 1, so that they won't trip alpha values
Positive[indices] <- 1 #value cannot be 1 in bb
#Same with projected values = dim(B[2])
indices <- which(P == dim(B)[2])
Negative[indices] <- 1 #value cannot be -1 in bb
### End Addition ###
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
fdsm_props <- fdsm(davis, trials = 100, sparse = TRUE, dyad=c("OLIVIA","LAURA"))
fdsm_props$dyad_values
bb <- backbone.extract(fdsm_props$positive, fdsm_probs$negative)
bb <- backbone.extract(fdsm_props$positive, fdsm_props$negative)
bb["OLIVIA", "LAURA"]
bb <- backbone.extract(fdsm_props$positive)
bb["OLIVIA", "LAURA"]
setwd("C:/Users/rache/Dropbox/Neal/R Development/Datasets/115S Data")
senate <- read.csv("115s.csv", header = TRUE, row.names = 1)
data <- as.matrix(senate)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"), sparse = FALSE)
library(backbone)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"), sparse = FALSE)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
fdsm <- fdsm(data,
trials=1000)
fdsm$positive
fdsm$negative
setwd("C:/Users/rache/Dropbox/Neal/R Development/Datasets/115S Data")
senate <- read.csv("115s.csv", header = TRUE, row.names = 1)
data <- as.matrix(senate)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
bb <- backbone.extract(fdsm$positive, alpha=0.05)
observed <- data %*% t(data)
View(data)
class(data)
View(senate)
library(backbone)
setwd("C:/Users/rache/Dropbox/Neal/R Development/Datasets/115S Data")
senate <- read.csv("115s.csv", header = TRUE, row.names = 1)
data <- as.matrix(senate)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
setwd("C:/Users/rache/Dropbox/Neal/R Development/Datasets/115S Data")
senate <- read.csv("115s.csv", header = TRUE, row.names = 1)
View(senate)
class(senate)
data <- as.matrix(senate)
observed <- data %*% t(data)
senate <- as.matrix(read.csv("115s.csv", header = TRUE, row.names = 1))
rm(data)
data <- as.matrix(read.csv("115s.csv", header = TRUE, row.names = 1))
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
observed <- data %*% t(data)
observed <- data%*%t(data)
observed <- davis%*%t(davis)
data[1:10, 1:10]
data <- data.matrix(read.csv("115s.csv", header = TRUE, row.names = 1))
observed <- data %*% t(data)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"), sparse = FALSE)
bb <- backbone.extract(fdsm$positive, alpha=0.05)
observed <- data %*% t(data)
#This is 0, they didn't sponsor anything together
observed["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
View(observed)
fdsm$positive
fdsm <- function(B,
trials = 1000,
sparse = TRUE,
dyad = NULL,
progress = FALSE){
#Argument Checks
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Algorithm credit to: Strona, G., Nappo, D., Boccacci, F., Fattorini, S., San-Miguel-Ayanz, J. (2014). A fast and unbiased procedure to randomize ecological binary matrices with fixed row and column totals. Nature Communications, 5, 4114
#Use curveball to create an FDSM Bstar
m <- B
RC=dim(m) #matrix dimensions
R=RC[1]   #number of rows
C=RC[2]   #number of columns
hp=list() #create a list
for (row in 1:dim(m)[1]) {hp[[row]]=(which(m[row,]==1))}
l_hp=length(hp)
for (rep in 1:(5*l_hp)){
AB=sample(1:l_hp,2)
a=hp[[AB[1]]]
b=hp[[AB[2]]]
ab=intersect(a,b)
l_ab=length(ab)
l_a=length(a)
l_b=length(b)
if ((l_ab %in% c(l_a,l_b))==F){
tot=setdiff(c(a,b),ab)
l_tot=length(tot)
tot=sample(tot, l_tot, replace = FALSE, prob = NULL)
L=l_a-l_ab
hp[[AB[1]]] = c(ab,tot[1:L])
hp[[AB[2]]] = c(ab,tot[(L+1):l_tot])}
}
rm=matrix(0,R,C)
for (row in 1:R){rm[row,hp[[row]]]=1}
Bstar <- rm
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
message("Finding the Backbone using Curveball FDSM")
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
message("Estimated time to complete is ", est, " " , units(est))
if (progress == "TRUE"){
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
}
if ((progress == "TRUE") & (i>=10)) {utils::setTxtProgressBar(pb, i)}
} #end for loop
if (progress == "TRUE"){close(pb)}
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"), sparse = FALSE)
fdsm$positive
#This is 0, they didn't sponsor anything together
observed["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
View(observed)
View(data)
data <- as.matrix(read.csv("115s.csv", header = TRUE, row.names = 1))
data[1:10]
data[1:10, 1:10]
data <- as.matrix(read.csv("115s.csv", header = TRUE, row.names = 1, stringsAsFactors = TRUE))
View(data)
data[1:10, 1:10]
data <- as.matrix(sapply(read.csv("115s.csv", header = TRUE, row.names = 1), as.numeric))
observed <- data %*% t(data)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"), sparse = FALSE)
bb <- backbone.extract(fdsm$positive, alpha=0.05)
#This is 0, they didn't sponsor anything together
observed["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
View(observed)
View(data)
fdsm <- fdsm(senate,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"), sparse = FALSE)
davis["LAURA"]
davis["LAURA",]
install.packages("poisbinom")
## Binomial probabilities
pp <- runif(500)
pp
## PMF
dpoisbinom(36, pp)
library(poisbinom)
## PMF
dpoisbinom(36, pp)
## CDF
ppoisbinom(36, pp)
## Quantile function
qpoisbinom(0.3, pp)
## Random deviates
rpoisbinom(5, pp)
setwd("C:/Users/rache/OneDrive/Desktop")
setwd("C:/Users/rache/OneDrive/Desktop")
data <- as.matrix(read.csv("senate115.csv", header = TRUE, row.names = 1))
observed <- data %*% t(data)
View(observed)
View(observed)
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
bb <- backbone.extract(fdsm$positive, alpha=0.05)
observed <- data %*% t(data)
#This is 0, they didn't sponsor anything together
observed["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
#This is usually 1, but it should be 0 by definition
bb["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
setwd("C:/Users/rache/OneDrive/Desktop")
data <- as.matrix(read.csv("senate115.csv", header = TRUE, row.names = 1))
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
library(backbone)
bb <- backbone.extract(fdsm$positive, alpha=0.05)
observed <- data %*% t(data)
#This is 0, they didn't sponsor anything together
observed["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
#This is usually 1, but it should be 0 by definition
bb["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
fdsm <- function(B,
trials = 1000,
sparse = TRUE,
dyad = NULL,
progress = FALSE){
#Argument Checks
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Algorithm credit to: Strona, G., Nappo, D., Boccacci, F., Fattorini, S., San-Miguel-Ayanz, J. (2014). A fast and unbiased procedure to randomize ecological binary matrices with fixed row and column totals. Nature Communications, 5, 4114
#Use curveball to create an FDSM Bstar
m <- B
RC=dim(m) #matrix dimensions
R=RC[1]   #number of rows
C=RC[2]   #number of columns
hp=list() #create a list
for (row in 1:dim(m)[1]) {hp[[row]]=(which(m[row,]==1))}
l_hp=length(hp)
for (rep in 1:(5*l_hp)){
AB=sample(1:l_hp,2)
a=hp[[AB[1]]]
b=hp[[AB[2]]]
ab=intersect(a,b)
l_ab=length(ab)
l_a=length(a)
l_b=length(b)
if ((l_ab %in% c(l_a,l_b))==F){
tot=setdiff(c(a,b),ab)
l_tot=length(tot)
tot=sample(tot, l_tot, replace = FALSE, prob = NULL)
L=l_a-l_ab
hp[[AB[1]]] = c(ab,tot[1:L])
hp[[AB[2]]] = c(ab,tot[(L+1):l_tot])}
}
rm=matrix(0,R,C)
for (row in 1:R){rm[row,hp[[row]]]=1}
Bstar <- rm
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
message("Finding the Backbone using Curveball FDSM")
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar >= P)+0
Negative <- Negative + (Pstar <= P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
message("Estimated time to complete is ", est, " " , units(est))
if (progress == "TRUE"){
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
}
if ((progress == "TRUE") & (i>=10)) {utils::setTxtProgressBar(pb, i)}
} #end for loop
if (progress == "TRUE"){close(pb)}
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
fdsm <- function(B,
trials = 1000,
sparse = TRUE,
dyad = NULL,
progress = FALSE){
#Argument Checks
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Algorithm credit to: Strona, G., Nappo, D., Boccacci, F., Fattorini, S., San-Miguel-Ayanz, J. (2014). A fast and unbiased procedure to randomize ecological binary matrices with fixed row and column totals. Nature Communications, 5, 4114
#Use curveball to create an FDSM Bstar
m <- B
RC=dim(m) #matrix dimensions
R=RC[1]   #number of rows
C=RC[2]   #number of columns
hp=list() #create a list
for (row in 1:dim(m)[1]) {hp[[row]]=(which(m[row,]==1))}
l_hp=length(hp)
for (rep in 1:(5*l_hp)){
AB=sample(1:l_hp,2)
a=hp[[AB[1]]]
b=hp[[AB[2]]]
ab=intersect(a,b)
l_ab=length(ab)
l_a=length(a)
l_b=length(b)
if ((l_ab %in% c(l_a,l_b))==F){
tot=setdiff(c(a,b),ab)
l_tot=length(tot)
tot=sample(tot, l_tot, replace = FALSE, prob = NULL)
L=l_a-l_ab
hp[[AB[1]]] = c(ab,tot[1:L])
hp[[AB[2]]] = c(ab,tot[(L+1):l_tot])}
}
rm=matrix(0,R,C)
for (row in 1:R){rm[row,hp[[row]]]=1}
Bstar <- rm
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
message("Finding the Backbone using Curveball FDSM")
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar >= P)+0
Negative <- Negative + (Pstar <= P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
message("Estimated time to complete is ", est, " " , units(est))
if (progress == "TRUE"){
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
}
if ((progress == "TRUE") & (i>=10)) {utils::setTxtProgressBar(pb, i)}
} #end for loop
if (progress == "TRUE"){close(pb)}
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
#' @param positive Matrix: proportion of times the projected matrix values were above the corresponding matrices generated by \link{hyperg}, \link{fdsm}, or \link{sdsm}.
#' @param negative Matrix: proportion of times the projected matrix values were below the corresponding matrices generated by \link{hyperg}, \link{fdsm}, or \link{sdsm}. If supplied, a signed backbone will be returned; if not supplied, a binary backbone will be returned. Default is set to NULL.
#' @param alpha Real: Precision of significance test (one-tailed if only the positive matrix supplied, two-tailed if positive and negative matrices supplied)
#'
#' @return backbone Matrix: Binary or signed adjacency matrix of backbone graph.
#' @export
#'
#' @examples
#' probs <- sdsm(davis, 100)
#' bb <- backbone.extract(probs$positive, probs$negative)
backbone.extract <- function(positive, negative = NULL, alpha = 0.05){
#Argument Checks
if ((alpha >= 1) | (alpha <= 0)) {stop("alpha must be between 0 and 1")}
if (length(negative) != 0) {alpha <- alpha / 2}  #Use a two-tailed test for signed backbones
#Convert values to matrix
SignedPositive <- as.matrix((positive<=alpha)+0)
SignedNegative <- as.matrix((negative<=alpha)+0)
SignedNegative[SignedNegative==1] <- -1
#Create backbone matrix
if (length(negative) == 0) {backbone <- SignedPositive
} else {backbone <- SignedPositive + SignedNegative}
diag(backbone) <- 0
rownames(backbone) <- rownames(positive)
colnames(backbone) <- rownames(positive)
return(backbone)
}
setwd("C:/Users/rache/OneDrive/Desktop")
data <- as.matrix(read.csv("senate115.csv", header = TRUE, row.names = 1))
fdsm <- fdsm(data,
trials=1000,
dyad=c("Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"))
bb <- backbone.extract(fdsm$positive, alpha=0.05)
observed <- data %*% t(data)
#This is 0, they didn't sponsor anything together
observed["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
#This is usually 1, but it should be 0 by definition
bb["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
#The probability is computed correctly, but in this case is irrelevant
prob <- fdsm$positive["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
prob
View(bb)
bb <- backbone.extract(fdsm$positive, fdsm$negative, alpha=0.05)
#This is usually 1, but it should be 0 by definition
bb["Sen. Kyl, Jon [R-AZ]","Sen. Sessions, Jeff [R-AL]"]
View(bb)
?phyper
library(backbone)
library(backbone)
devtools::build()
