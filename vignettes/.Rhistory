if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
fdsm_swaps(davis)
fdsm_swaps <- function(B,
trials = 10000,
FUN = curveball,
by_row = TRUE,
sparse = TRUE,
dyad = NULL){
#Argument Checks
#if ((FUN %in% c(curveball(), curveball_subtraction(), curveball_selection(), gale_ryser(), rectangle_loop())) != "TRUE") {stop("test must be a checkerboard swap function")}
if ((by_row!="TRUE") & (by_row!="FALSE")) {stop("by_row must be either TRUE or FALSE")}
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#If you want data by column, indicate false
if (by_row == FALSE) {B <- t(B)}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Algorithm credit to: Strona, G., Nappo, D., Boccacci, F., Fattorini, S., San-Miguel-Ayanz, J. (2014). A fast and unbiased procedure to randomize ecological binary matrices with fixed row and column totals. Nature Communications, 5, 4114
#Use curveball to create an FDSM Bstar
print("in the for loop")
Bstar <- FUN(B)
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
print("Finding the Signed Backbone using Curveball FDSM")
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
print(paste("Estimated time to complete is", est, units(est)))
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
if (i>=10) {utils::setTxtProgressBar(pb, i)}
} #end for loop
close(pb)
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
}
fdsm_swaps(davis)
fdsm_swaps <- function(B,
trials = 10000,
FUN = curveball_selection(),
by_row = TRUE,
sparse = TRUE,
dyad = NULL){
#Argument Checks
#if ((FUN %in% c(curveball(), curveball_subtraction(), curveball_selection(), gale_ryser(), rectangle_loop())) != "TRUE") {stop("test must be a checkerboard swap function")}
if ((by_row!="TRUE") & (by_row!="FALSE")) {stop("by_row must be either TRUE or FALSE")}
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#If you want data by column, indicate false
if (by_row == FALSE) {B <- t(B)}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Use curveball to create an FDSM Bstar
Bstar <- FUN(B)
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
print("Finding the Signed Backbone using Curveball FDSM")
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
print(paste("Estimated time to complete is", est, units(est)))
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
if (i>=10) {utils::setTxtProgressBar(pb, i)}
} #end for loop
close(pb)
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
}
fdsm_swaps(davis)
#' @return random matrix with the same row and column sums as matrix
#' @export
#'
#' @examples
#' test <- matrix(data = c(1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0),nrow = 4,ncol = 5, byrow=TRUE)
#' test <- davis
#' new_rm <- curveball_selection(test, 100)
#' all(test == new_rm)
#' all(rowSums(test) == rowSums(new_rm))
#' all(colSums(test) == colSums(new_rm))
curveball_selection <- function(matrix, reps = 100, swaps_only = TRUE){
if ((reps < 1) | (reps%%1!=0)) {stop("reps must be a positive integer")}
m <- matrix
R <- dim(m)[1] #number of rows
C <- dim(m)[2] #number of cols
rep <- 0
while (rep < (reps+1)){
swap <- FALSE
#pick two rows
row_indices <- sample(R, 2, replace = FALSE, prob = NULL)
row_indices
#find all columns of 10 and 01 types
cb1 <- NULL
cb2 <- NULL
for (col in 1:C){
if (all(m[row_indices, col] == c(1,0))){
cb1 <- c(cb1,col)
}#end if
if (all(m[row_indices, col] == c(0,1))){
cb2 <- c(cb2,col)
}#end if
}#end for
#sample one column from cb1 and one from cb2 and swap
if ((length(cb1)>0) & (length(cb2)>0)){
col_1 <- newsample(cb1)
col_2 <- newsample(cb2)
m[row_indices[1], col_1] <- 0
m[row_indices[1], col_2] <- 1
m[row_indices[2], col_1] <- 1
m[row_indices[2], col_2] <- 0
swap <- TRUE
} #end if for swaps
if (swaps_only == TRUE){
if(swap == TRUE){
rep <- rep+1
}
}#end swaps_only if
else{
rep <- rep+1
}
} #end for
return(m)
} #end function
fdsm_swaps(davis)
fdsm_swaps <- function(B,
trials = 10000,
FUN = curveball_selection,
by_row = TRUE,
sparse = TRUE,
dyad = NULL){
#Argument Checks
#if ((FUN %in% c(curveball(), curveball_subtraction(), curveball_selection(), gale_ryser(), rectangle_loop())) != "TRUE") {stop("test must be a checkerboard swap function")}
if ((by_row!="TRUE") & (by_row!="FALSE")) {stop("by_row must be either TRUE or FALSE")}
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#If you want data by column, indicate false
if (by_row == FALSE) {B <- t(B)}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Use curveball to create an FDSM Bstar
Bstar <- FUN(B)
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
print("Finding the Signed Backbone using Curveball FDSM")
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
print(paste("Estimated time to complete is", est, units(est)))
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
if (i>=10) {utils::setTxtProgressBar(pb, i)}
} #end for loop
close(pb)
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
}
fdsm_swaps(davis)
fdsm_swaps <- function(B,
trials = 10000,
FUN = curveball_selection,
by_row = TRUE,
sparse = TRUE,
dyad = NULL){
#Argument Checks
#if ((FUN %in% c(curveball(), curveball_subtraction(), curveball_selection(), gale_ryser(), rectangle_loop())) != "TRUE") {stop("test must be a checkerboard swap function")}
if ((by_row!="TRUE") & (by_row!="FALSE")) {stop("by_row must be either TRUE or FALSE")}
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#If you want data by column, indicate false
if (by_row == FALSE) {B <- t(B)}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Use curveball to create an FDSM Bstar
Bstar <- FUN(B)
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
print(paste("Finding the Signed Backbone using ", FUN, " FDSM"))
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
print(paste("Estimated time to complete is", est, units(est)))
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
if (i>=10) {utils::setTxtProgressBar(pb, i)}
} #end for loop
close(pb)
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
fdsm_swaps(davis)
fdsm_swaps <- function(B,
trials = 10000,
FUN = curveball_selection,
by_row = TRUE,
sparse = TRUE,
dyad = NULL){
#Argument Checks
#if ((FUN %in% c(curveball(), curveball_subtraction(), curveball_selection(), gale_ryser(), rectangle_loop())) != "TRUE") {stop("test must be a checkerboard swap function")}
if ((by_row!="TRUE") & (by_row!="FALSE")) {stop("by_row must be either TRUE or FALSE")}
if ((sparse!="TRUE") & (sparse!="FALSE")) {stop("sparse must be either TRUE or FALSE")}
if ((trials < 1) | (trials%%1!=0)) {stop("trials must be a positive integer")}
if (class(B)!="matrix") {stop("input bipartite data must be a matrix")}
#If you want data by column, indicate false
if (by_row == FALSE) {B <- t(B)}
#Project to one-mode data
if (sparse=="TRUE") {
B <- Matrix::Matrix(B,sparse=T)
P<-B%*%Matrix::t(B)
}
if (sparse=="FALSE") {P<-B%*%t(B)}
#Create Positive and Negative Matrices to hold backbone
Positive <- matrix(0, nrow(P), ncol(P))
Negative <- matrix(0, nrow(P), ncol(P))
#Dyad save
edge_weights <- numeric(trials)
if (length(dyad) > 0){
if (class(dyad[1]) != "numeric"){
vec <- match(c(dyad[1], dyad[2]), rownames(B))
}
else{
vec <- dyad
}
}
#Build null models
for (i in 1:trials){
#Use curveball to create an FDSM Bstar
Bstar <- FUN(B)
if (sparse=="TRUE") {Bstar <- Matrix::Matrix(Bstar,sparse=T)}
#Construct Pstar from Bstar
if (sparse=="TRUE") {Pstar<-Bstar%*%Matrix::t(Bstar)}
if (sparse=="FALSE") {Pstar<-Bstar%*%t(Bstar)}
#Start estimation timer; print message
if (i == 1) {
start.time <- Sys.time()
print(paste("Finding the Signed Backbone using ", substitute(FUN), " FDSM"))
}
#Check whether Pstar edge is larger/smaller than P edge
Positive <- Positive + (Pstar > P)+0
Negative <- Negative + (Pstar < P)+0
#Save Dyad of P
if (length(dyad) > 0){
edge_weights[i] <- Pstar[vec[1], vec[2]]
}
#Report estimated running time, update progress bar
if (i==10){
end.time <- Sys.time()
est = (round(difftime(end.time, start.time, units = "auto"), 2) * (trials/10))
print(paste("Estimated time to complete is", est, units(est)))
pb <- utils::txtProgressBar(min = 0, max = trials, style = 3)
}
if (i>=10) {utils::setTxtProgressBar(pb, i)}
} #end for loop
close(pb)
#Proporition of greater than expected and less than expected
Positive <- (Positive/trials)
Negative <- (Negative/trials)
rownames(Positive) <- rownames(B)
colnames(Positive) <- rownames(B)
rownames(Negative) <- rownames(B)
colnames(Negative) <- rownames(B)
if (length(dyad) > 0){
return(list(positive = Positive, negative = Negative, dyad_values = edge_weights))
}
else {
return(list(positive = Positive, negative = Negative))
}
} #end fdsm function
fdsm_swaps(davis)
install.packages("CVXR")
library(CVXR)
?Variable
davis <- matrix(
c(1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,
0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,
0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0),
nrow = 18,
ncol = 14,
byrow = TRUE,
dimnames = list(
c("EVELYN", "LAURA", "THERESA", "BRENDA", "CHARLOTTE", "FRANCES", "ELEANOR", "PEARL", "RUTH", "VERNE", "MYRNA", "KATHERINE", "SYLVIA", "NORA", "HELEN", "DOROTHY", "OLIVIA", "FLORA"),
c("6/27", "3/2", "4/12", "9/26", "2/25", "5/19", "3/15", "9/16", "4/8", "6/10", "2/23", "4/7", "11/21", "8/3")
)
)
Mmax <- Variable(dim(davis)[1], dim(davis)[2], name = "Mmax")
sum(davis)
matrix <- davis
sum(matrix[i,j]*log(1/(matrix[i,j]))+(1-matrix[i,j])*(1/(1-matrix[i,j])))
i <- 1:dim(matrix)[1] #number of rows
j <- 1:dim(matrix)[2] #number of cols
sum(matrix[i,j]*log(1/(matrix[i,j]))+(1-matrix[i,j])*(1/(1-matrix[i,j])))
sum(matrix[i,j]*log(1/(matrix[i,j]))+(1-matrix[i,j])*log((1/(1-matrix[i,j]))))
sum(matrix[i,j])
sum(matrix[i,j]*2)
sum(matrix[i,j]+2)
sum(matrix[i,j]*log(1/(matrix[i,j])))
sum(log(1/(matrix[i,j])))
solve(problem)
problem <- Problem(objective)
?Maximize
constraint1 <- matrix[i,j] >= 0
constraint2 <- matrix[i,j] <= 1
constraint3 <- all(rowSums(matrix), rowSums(davis))==TRUE
constraint4 <- all(colSums(matrix), colSums(davis))==TRUE
constraint3 <- all(rowSums(matrix) == rowSums(davis))==TRUE
constraint4 <- all(colSums(matrix)== colSums(davis))==TRUE
constraints <- list(constraint1, constraint2, constraint3, constraint4)
objective <- Maximize(sum(matrix[i,j]*log(1/(matrix[i,j]))+(1-matrix[i,j])*log((1/(1-matrix[i,j])))), constraints)
objective <- Maximize(sum(matrix[i,j]*log(1/(matrix[i,j]))+(1-matrix[i,j])*log((1/(1-matrix[i,j])))), constraints = list(constraint1, constraint2, constraint3, constraint4))
objective <- sum(matrix[i,j]*log(1/(matrix[i,j]))+(1-matrix[i,j])*log((1/(1-matrix[i,j]))))
problem <- Problem(Maximize(objective), constraints = list(constraint1, constraint2, constraint3, constraint4))
setwd("C:/Users/Rachel/Dropbox/MSU/Research/2019 Backbone/Backbone Package/backbone/vignettes")
